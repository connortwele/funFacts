{"version":3,"sources":["rootbeer.png","components/Origin.js","components/Ingredients.js","components/Similar.js","components/Cancer.js","components/Floats.js","App.js","serviceWorker.js","index.js","cap.png"],"names":["module","exports","Origin","className","Ingredients","Similar","Cancer","Floats","App","src","Rootbeer","alt","to","Cap","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,sC,2JCgB5BC,EAdA,WACX,OACA,yBAAKC,UAAU,WACX,wBAAIA,UAAU,WACV,6LACA,+RACA,2KACA,kOACA,6HCkBGC,EA1BK,WAChB,OACI,yBAAKD,UAAU,WACX,yDACA,4BACI,2CACA,uCACA,wCACA,sCACA,qCACA,+CACA,yCACA,wCACA,yCACA,qCACA,oCACA,sCACA,qCACA,wCACA,qCACA,qDCNDE,EAdC,WACZ,OACI,yBAAKF,UAAU,WACX,0DACA,4BACI,4CACA,iTACA,0CACA,kSCADG,EARA,WACX,OACI,yBAAKH,UAAU,WACX,waCOGI,EAVA,WACX,OACI,yBAAKJ,UAAU,WACX,sKACA,6BACA,iN,iCCgCGK,MA7Bf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKL,UAAU,OACb,yBAAKA,UAAU,OAAMM,IAAKC,IAAUC,IAAI,kBACxC,uBAAGR,UAAU,SAAb,uBACA,6BACA,kBAAC,IAAD,CAAMA,UAAU,QAAQS,GAAG,WAAU,yBAAKT,UAAU,MAAMM,IAAKI,IAAKF,IAAI,cAAxE,uBACA,6BACA,kBAAC,IAAD,CAAMR,UAAU,QAAQS,GAAG,gBAAe,yBAAKT,UAAU,MAAMM,IAAKI,IAAKF,IAAI,cAA7E,uBACA,6BACA,kBAAC,IAAD,CAAMR,UAAU,QAAQS,GAAG,YAAW,yBAAKT,UAAU,MAAMM,IAAKI,IAAKF,IAAI,cAAzE,gCACA,6BACA,kBAAC,IAAD,CAAMR,UAAU,QAAQS,GAAG,WAAU,yBAAKT,UAAU,MAAMM,IAAKI,IAAKF,IAAI,cAAxE,iCACA,6BACA,kBAAC,IAAD,CAAMR,UAAU,QAAQS,GAAG,WAAU,yBAAKT,UAAU,MAAMM,IAAKI,IAAKF,IAAI,cAAxE,uBAAyG,6BAAzG,wCAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOG,KAAK,UAAUC,UAAYb,IAClC,kBAAC,IAAD,CAAOY,KAAK,eAAeC,UAAYX,IACvC,kBAAC,IAAD,CAAOU,KAAK,WAAWC,UAAWV,IAClC,kBAAC,IAAD,CAAOS,KAAK,UAAUC,UAAWT,IACjC,kBAAC,IAAD,CAAOQ,KAAK,UAAUC,UAAWR,QCpBvBS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BnC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.2a1a4f08.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rootbeer.0724cd6b.png\";","import React from 'react'\n\nconst Origin = () => {\n    return(\n    <div className=\"content\">\n        <ul className=\" origin\">\n            <li>Sassafras root beverages were made by indigenous peoples of the Americas for culinary and medicinal reasons before the arrival of Europeans in North America.</li>\n            <li>The tradition of brewing root beer is thought to have evolved out of other small beer traditions that produced fermented drinks with very low alcohol content that were thought to be healthier to drink than possibly tainted local sources of drinking water.</li>\n            <li>European culinary techniques have been applied to making traditional sassafras-based beverages similar to root beer since the 16th century.</li>\n            <li>Root beer has been sold in confectionery stores since the 1840s, and written recipes for root beer have been documented since the 1860s. It possibly was combined with soda as early as the 1850s.</li>\n            <li>Root beer sold in stores was most often sold as a syrup rather than a ready-made beverage.</li>\n        </ul>\n    </div>\n    )\n}\n\nexport default Origin;","import React from 'react'\n\nconst Ingredients = () =>{\n    return(\n        <div className=\"content\">\n            <p>Commonly Used Ingredients:</p>\n            <ul>\n                <li>Wintergreen</li>\n                <li>Vanilla</li>\n                <li>Licorice</li>\n                <li>Ginger</li>\n                <li>Anise</li>\n                <li>Juniper Berries</li>\n                <li>Dandelion</li>\n                <li>Allspice</li>\n                <li>Chocolate</li>\n                <li>Clove</li>\n                <li>Hops</li>\n                <li>Nutmeg</li>\n                <li>Sugar</li>\n                <li>Molasses</li>\n                <li>Yeast</li>\n                <li>... and Many More!</li>\n            </ul>\n        </div>\n    )\n}\n\nexport default Ingredients;","import React from 'react'\n\nconst Similar = () =>{\n    return(\n        <div className=\"content\">\n            <p>Other drinks you may enjoy:</p>\n            <ul>\n                <li>Sarsaparilla</li>\n                <p>Originally made with the native Central American plant smilax ornata, also known as zarzaparilla. This drink is generally associated with the Old West and was popular during the 19th century. Today it is made with an artificial flavoring and is considered a type of rootbeer</p>\n                <li>Birch Beer</li>\n                <p> Birch beer is made from herbal extracts of birch bark and birch sap.  Birch beer comes in a variety of colors based on the species of birch tree.  Colors include brown, red, blue, and 'clear.'  Birch beer is most common in the Northeastern United States. </p>\n            </ul>\n        </div>\n    )\n}\n\nexport default Similar;","import React from 'react'\n\nconst Cancer = () => {\n    return(\n        <div className=\"content\">\n            <p>Up until the mid-20th century, most commercial root beer got its flavoring from the sassafras root. In 1960, the FDA banned sassafras in all packaged foods when tests on laboratory rats indicated that it was a carcinogen. However, “old time” root beer can and is still made with sassafras root—extracts can be purchased with the cancer-causing compound called safrole removed.</p>\n        </div>\n    )\n}\n\nexport default Cancer;","import React from 'react'\n\nconst Floats = () =>{\n    return(\n        <div className=\"content\">\n            <p>Frank. J. Wisner, owner of Colorado’s Cripple Creek Brewing, is credited with creating the first root beer float on Aug. 19, 1893.</p>\n            <br/>\n            <p>Also known as a \"black cow\" or \"brown cow\", the root beer float is traditionally made with vanilla ice cream and root beer, but it can also be made with other ice cream flavors</p>\n        </div>\n    )\n}\n\nexport default Floats;","import React from 'react';\nimport { Link, Route, BrowserRouter, Switch } from 'react-router-dom'\nimport Origin from './components/Origin'\nimport Ingredients from './components/Ingredients'\nimport Similar from './components/Similar'\nimport Cancer from './components/Cancer'\nimport Floats from './components/Floats'\nimport Rootbeer from './rootbeer.png'\nimport Cap from './cap.png'\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <img className=\"mugs\"src={Rootbeer} alt=\"rootbeer mugs\"/>\n        <p className=\"title\">Root Beer Fun Facts</p>\n        <br/>\n        <Link className=\"links\" to=\"/Origin\"><img className=\"cap\" src={Cap} alt=\"bottlecap\"/> Origin of Rootbeer</Link>\n        <br/>\n        <Link className=\"links\" to=\"/Ingredients\"><img className=\"cap\" src={Cap} alt=\"bottlecap\"/> Common Ingredients</Link>\n        <br/>\n        <Link className=\"links\" to=\"/Similar\"><img className=\"cap\" src={Cap} alt=\"bottlecap\"/> Drinks Similar to Root Beer</Link>\n        <br/>\n        <Link className=\"links\" to=\"/Cancer\"><img className=\"cap\" src={Cap} alt=\"bottlecap\"/> Does Root Beer Cause Cancer?</Link>\n        <br/>\n        <Link className=\"links\" to=\"/Floats\"><img className=\"cap\" src={Cap} alt=\"bottlecap\"/> Vanilla Ice Cream: <br/>\n        the Unofficial Sidekick of Root Beer</Link>\n        <Switch>\n          <Route path=\"/Origin\" component ={Origin}/>\n          <Route path=\"/Ingredients\" component ={Ingredients}/>\n          <Route path=\"/Similar\" component={Similar} />\n          <Route path=\"/Cancer\" component={Cancer} />\n          <Route path=\"/Floats\" component={Floats}/>\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/cap.29fedb34.png\";"],"sourceRoot":""}